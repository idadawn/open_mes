version: "3.8"

services:
  # 数据库服务
  db:
    container_name: mes-db
    image: mariadb:10.8
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./data/db-vol:/var/lib/mysql
      - ./部署和文档/data/sql/:/docker-entrypoint-initdb.d/
    environment:
      MYSQL_ROOT_PASSWORD: aa123456
      MYSQL_USER: db_user
      MYSQL_PASSWORD: db@123
      MYSQL_DATABASE: mes-pro
      MYSQL_BACKUP_PASSWORD: db@123
      MYSQL_BACKUP_USER: backup_user
    ports:
      - 3306:3306
    command: --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --sql_mode=IGNORE_SPACE,NO_ENGINE_SUBSTITUTION
      --lower_case_table_names=2
      --max_connections=1000
    networks:
      - mes-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis缓存服务
  redis:
    image: "redis:alpine"
    container_name: redis
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./data/redis/data:/data
    ports:
      - "6379:6379"
    networks:
      - mes-network
    command: redis-server --port 6379 --requirepass 123456 --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO对象存储服务
  minio:
    image: minio/minio:RELEASE.2022-06-25T15-50-16Z
    container_name: minio
    privileged: true
    restart: always
    ports:
      - 9000:9000 # api 端口
      - 9001:9001 # 控制台端口
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      MINIO_ROOT_USER: admin    #管理后台用户名
      MINIO_ROOT_PASSWORD: admin111 #管理后台密码，最小8个字符
    volumes:
      - ./data/minio/data:/data               #映射当前目录下的data目录至容器内/data目录
      - ./data/minio/config:/root/.minio/     #映射配置目录
    command: server --console-address '0.0.0.0:9001' --address '0.0.0.0:9000' /data  #指定容器中的目录 /data
    networks:
      - mes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MES后端API服务
  mes-server-api:
    container_name: metaxk-mes-server
    build:
      context: ./部署和文档
      dockerfile: Dockerfile
    image: metaxk-mes-server
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./data/server/logs:/metaxk-mes-server/logs
    environment:
      - TZ=Asia/Shanghai
      - JAVA_OPTS=-Xms512m -Xmx512m -Djava.security.egd=file:/dev/./urandom
    ports:
      - 48080:48080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:48080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务
  front:
    container_name: metaxk-mes-front
    image: bitnami/nginx:latest
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./部署和文档/data/front/conf/nginx.conf:/opt/bitnami/nginx/conf/nginx.conf:rw
      - ./部署和文档/data/front/dist:/app
    environment:
      - TZ=Asia/Shanghai
    ports:
      - 48081:8080
    depends_on:
      mes-server-api:
        condition: service_healthy
    networks:
      - mes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mes-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mes-network

volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  minio-config:
    driver: local